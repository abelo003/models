
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.stream.Collectors;

import javax.servlet.ReadListener;
import javax.servlet.ServletInputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletRequestWrapper;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.fasterxml.jackson.databind.ObjectMapper;

public class WalletServletRequestAux extends HttpServletRequestWrapper{

	private static final Logger LOGGER = LoggerFactory.getLogger(WalletServletRequestAux.class);

	   private ObjectMapper mapper = new ObjectMapper();
	   private String payload = null;

	   /**
	    * Constructor default.	
	    * @param request request
	    */
	   public WalletServletRequestAux(HttpServletRequest request) {
	       super(request);
	       try {
	           payload = request.getReader().lines().collect(Collectors.joining(System.lineSeparator()));
	       } catch (IOException e) {
	           LOGGER.error("", e);
	       }
	   }

	   /**
	    * Metodo que realiza la transformacion de inputstream que no se puede leer
	    * dos veces, a un objeto que se solicite.
	    * @param clase tipo de clase que se requiere a partir del inputstream.
	    * @throws IOException excepcion
	    * @return generic
	    */
	   @SuppressWarnings({"unchecked", "rawtypes"})
	   public <E> E getPayload(Class clase) throws IOException {
	       E object = null;
	       try {
	           object = (E) mapper.readValue(payload, clase);
	       } catch (IOException e) {
	           LOGGER.error(e.getMessage(), e);
	           throw e;
	       }
	       return object;
	   }

	   public String getPayloadString() {
	       return payload;
	   }

	   public void setPayload(String payload) {
	       this.payload = payload;
	   }
	   
	   @Override
	   public ServletInputStream getInputStream() throws IOException {
	       final ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(payload.getBytes());
	       return new ServletInputStream() {
	           @Override
	           public int read() throws IOException {
	               return byteArrayInputStream.read();
	           }

	           @Override
	           public boolean isFinished() {
	               return this.isFinished();
	           }

	           @Override
	           public boolean isReady() {
	               return this.isReady();
	           }

	           @Override
	           public void setReadListener(ReadListener listener) {
	               this.setReadListener(listener);
	           }
	       };

	   }
}
